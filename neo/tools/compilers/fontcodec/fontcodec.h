/*
 * fontcomp.h
 *
 *  Created on: 26 de gen. 2018
 *      Author: Biel Bestu√© de Luna
 *
 *      this file is GPLv3
 */

//#include <rapidxml>
#include "../../libs/rapidxml/rapidxml-1.13/rapidxml.hpp"

#include "../idlib/Str.h"
#include "../idlib/containers/List.h"

namespace BFG
{

typedef struct
{
	bool	verbose;
	idStr	outputFilename;
} fontCodecGlobals_t;

/*
 * These are classes represent fonts generated by BMFont
 */

typedef struct
{
    int 	id;        	// char utf32
    int 	x;         	// x position in image (in pixels)
    int 	y;         	// y position in image (in pixels)
    int 	width;    	// width in image (in pixels)
    int 	height;    	// height in image (in pixels)
    int 	xoffset;   	// offset from pen position to start of glyph (in pixels)
    int 	yoffset;  	// offset from top of the line to start of glyph (in pixels)
    int 	xadvance;	// how much to move pen after drawing glyph (in pixels)
    int 	page;      	// image number
    int 	chnl;      	// channel mask in the image (0xF == all channels) (important when chars are packed)
} BMfontStructure_t;

// information about how the font was generated
typedef struct
{
	idStr 	faceName;
	int		size;		// font size in points
	bool 	bold;
  	bool 	italic;
  	idStr	charset;
	bool	unicode;    // true if unicode (charset is empty then)
	int 	heightStretchPercent;
	bool 	fontSmoothing;
 	int 	antiAliasLevel;
 	int 	paddingT;
  	int 	paddingR;
  	int 	paddingB;
   	int 	paddingL;
  	int 	spacingHoriz;
   	int 	spacingVert;
  	int 	outlineThickness;
} BMprocessfontStructure_t;

// information about the generated font
typedef struct
{
	int 	lineHeight;	// line height
	int		fontBase;	// dist from top to baseline
	int		scaleW;  	// width of the picture
	int 	scaleH;  	// height of the picture
	int 	numPages;	// numeber of pictures
	bool 	packed;     // true if glyphs are packed into multiple channels
	int		alphaChnl;	// contents of alpha channel: 0 - glyph, 1 - outline, 2 - encoded glyph & outline, 3 - zero, 4 - one
	int		redChnl;  	// same
	int		greenChnl; 	// same
	int 	blueChnl;  	// same
} BMgeneratedfontStructure_t;
class BMglyph {
	BMglyph();
public:
	void parse(idStr glyphLine );
private:
	BMfontStructure_t fontStructue;
};

class BMpage {
	BMpage();
public:
	int id;
    idStr file;
    bool Load( idStr line );
};

class BMfont {
	BMfont();
public:
	idList<BMglyph> glyphs;
	idList<BMpage> pages;
	bool LoadInfo( idStr line );
	bool LoadCommon( idStr line );
	void Load( idStr fileName );

private:
	BMprocessfontStructure_t	processStrucutre;
	BMgeneratedfontStructure_t 	generatedFontStructure;
};

/*
 * Here we have idTech .dat font file.
 * Only fonts with one page are supported.
 */

typedef struct
{
	int 	id;			// UTF32 - stored separately
	byte 	width;      // width of glyph in pixels
	byte 	height;     // height of glyph in pixels
	byte 	top;        // distance in pixels from the base line to the top of the glyph
	byte 	left;       // distance in pixels from the pen to the left edge of the glyph
	byte 	xSkip;      // x adjustment after rendering this glyph
	ushort 	s;        	// x offset in image where glyph starts (in pixels)
	ushort 	t;        	// y offset in image where glyph starts (in pixels)
} BFGfontStructure_t;

class BFGglyph {
	BFGglyph();
public:
	void Decompile( BMglyph glyph, BMfont font );
	void Compile( idStr fileName );
private:
	BFGfontStructure_t fontStructue;

};

} // namespace BFG
